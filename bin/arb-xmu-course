#!/usr/bin/env ruby
require 'slop'
require 'httpclient'
require 'nokogiri'
require 'arb/xmu/course'

include Arb::Util
include Arb::Xmu::Course

TOKEN_FILE_NAME = 'encrypted_token'
TOKEN_SEPARATOR = ':'

def filter_text(raw)
  if Enumerable===raw
    return [].tap do |arr|
      raw.each do |item|
        arr<<filter_text(item)
      end
    end
  end
  black_list =([] << "\r" << "\n" << "\t" << "'")
  black_list.each do |tmp|
    raw.gsub! tmp, ''
  end
  raw
end

def set_up_account
  $stdout.puts 'Please input your student id:'
  stu_id= $stdin.gets.chomp
  $stdout.puts 'Please input your password:'
  passwd= $stdin.gets.chomp
  File.open TOKEN_FILE_NAME, 'w' do |file|
    file.write (SimpleDes.encrypt(stu_id)+TOKEN_SEPARATOR+SimpleDes.encrypt(passwd))
  end
end

def retrieve_check_code(client)
  File.open 'check_code.jpeg', 'wb' do |file|
    file.write(client.get('http://bkxk.xmu.edu.cn/xsxk/getCheckCode').body)
  end
  $stdout.puts 'Please input the check code generated as "check_code.jpeg" in current directory:'
  $stdin.gets.chomp
end

def authorize_session(client, username, password)
  checkCode = retrieve_check_code(client)
  client.get 'http://bkxk.xmu.edu.cn/xsxk/login.html', username: username, password: password, checkCode: checkCode
  #握手选课系统
  client.get 'http://bkxk.xmu.edu.cn/xsxk/localInfo.html'
  client.get 'http://bkxk.xmu.edu.cn/xsxk/index.html'
end

def parse_courses(raw_html)

  course_entities = []
  #puts raw_html
  raw_html.scan /yxxxJxb\[jxbid\] = top\.createJxbObj\((.*?)\)/m do |match|
    tmpArr = filter_text(match[0].split(','))
    course_entities << CourseEntity.new do |entity|
      
    end
  end

  course_entities
end

def parse_school_courses (raw_html)
  parse_courses(raw_html)

end

def select_school_elective(client, username, password)
  authorize_session(client, username, password)
  client.get 'http://bkxk.xmu.edu.cn/xsxk/compareTimestone.html?type=zxxk&timestone='
  school_courses = parse_school_courses((client.get 'http://bkxk.xmu.edu.cn/xsxk/yxxx.html').body)
end

def select_general_elective

end

def select_public

end


unless (File.exists? TOKEN_FILE_NAME)
  puts 'Please set up your account information first.'
  puts 'Note: Account data will be encrypted and stored in current directory!'
  set_up_account
  exit
end

stu_id, passwd=nil
client = HTTPClient.new

File.open TOKEN_FILE_NAME, 'r' do |file|
  stu_id, passwd=SimpleDes.decrypt(file.read.split(TOKEN_SEPARATOR))
end

opts = Slop.parse do |o|
  o.bool *%w{-h --help}, 'show help'
  o.bool *%w{-c --clear}, 'clear encrypted token'
  o.bool *%w{-r --reset}, 'reset up account information'

  #院选课程
  o.bool *%w{-s --school}, 'select school\'s elective courses.'
  #校选课程
  o.bool *%w{-g --general}, 'select general\'s elective courses.'
  #公共课程
  o.bool *%w{-p --public}, 'select public courses.'
end

case true
  when opts.help?
    puts(opts) && exit
  when opts.clear?
    File.delete(TOKEN_FILE_NAME) && exit
  when opts.reset?
    set_up_account && exit
  when opts.school?
    select_school_elective(client, stu_id, passwd)
  when opts.general?
    # select_general_elective
  when opts.public?
    # select_public
end

# client = HTTPClient.new

# #session init
# client.get 'http://bkxk.xmu.edu.cn/xsxk/login.html'
#
# File.open 'checkcode.jpeg','wb' do |file|
#   file.write(client.get('http://bkxk.xmu.edu.cn/xsxk/getCheckCode').body)
# end
#
# puts 'enter your student id'
# user= gets.chomp
# puts 'enter your password'
# passwd=gets.chomp
# puts 'enter the checkcode'
# checkcode=gets.chomp
#
# client.get 'http://bkxk.xmu.edu.cn/xsxk/login.html',username: user,password: passwd,checkCode: checkcode
#
# puts (client.get 'http://bkxk.xmu.edu.cn/xsxk/localInfo.html').body
#
# Nokogiri::parse((client.get 'http://bkxk.xmu.edu.cn/xsxk/index.html').body).css('script').each do |x|
#   puts x.text
# end
#